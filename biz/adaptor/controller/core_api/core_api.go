// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/xh-polaris/alumni-core_api/biz/adaptor"
	"github.com/xh-polaris/alumni-core_api/provider"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/alumni-core_api/biz/application/dto/alumni/core_api"
)

// SignUp .
// @router /user/sign_up [POST]
func SignUp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SignUpReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.SignUp(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SignIn .
// @router /user/sign_in [POST]
func SignIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SignInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.SignIn(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateUserInfo .
// @router /user/update_info [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.UpdateUserInfo(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateEducation .
// @router /user/update_edu [POST]
func UpdateEducation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateEducationReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.UpdateEducation(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateEmployment .
// @router /user/update_employment [POST]
func UpdateEmployment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateEmploymentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.UpdateEmployment(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetUserInfo .
// @router /user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.GetUserInfo(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateActivity .
// @router /activity/create [POST]
func CreateActivity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateActivityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.CreateActivity(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateActivity .
// @router /activity/update [POST]
func UpdateActivity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateActivityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.UpdateActivity(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetActivities .
// @router /activity/get_many [POST]
func GetActivities(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetActivitiesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.GetActivities(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetActivity .
// @router /activity/get [POST]
func GetActivity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetActivityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.GetActivity(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// RegisterActivity .
// @router /activity/register [POST]
func RegisterActivity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.RegisterActivityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.RegisterActivity(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CheckIn .
// @router /activity/check_in [POST]
func CheckIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CheckInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.CheckInActivity(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetRegisters .
// @router /activity/get_register [POST]
func GetRegisters(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetRegistersReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ActivityService.GetRegisters(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// ApplySignedUrl .
// @router /sts/apply [POST]
func ApplySignedUrl(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.ApplySignedUrlReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.StsService.ApplySignedUrl(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SendVerifyCode .
// @router /sts/send_verify_code [POST]
func SendVerifyCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SendVerifyCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.StsService.SendVerifyCode(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
